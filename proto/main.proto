syntax = "proto3";
package snowballr;

import "authentication.proto";
import "base.proto";
import "criterion.proto";
import "export.proto";
import "paper.proto";
import "project.proto";
import "review.proto";
import "user.proto";
import "user_settings.proto";

// The set of API calls the SnowballR web application uses to communicate with
// the backend.
// SnowballR is a tool aiming to assist in scientific research by organizing
// and managing structured literature reviews. The application is split into
// a web frontend and a backend on a central server keeping track of all data.
// This service represents all available interactions between this frontend and
// backend.
//
// Unless stated otherwise, **every** call **requires** the user to be
// **authenticated**. This will happen automatically using a http-only cookie
// set by the server during registration or login. If failing to do so, an
// `UNAUTHENTICATED` error will be returned.
//
// Furthermore, the server may respond at any time with the `UNAVAILABLE` error
// code if it is unable to process a request.
//
// Every error should come with a meaningful description, detailing the nature
// of the occurred error.
//
// Every enum contains a `_UNSPECIFIED` variant indicating its absence.
// If any other variant is present, the field is considered to be _specified_.
// The word _guaranteed_ may only convey meaning in the context of this
// contract. Due to the nature of the underlying network communication, a result
// may never be really guaranteed and proper error handling is advised. In the
// following, _guaranteed_ shall denote a situation in which the client shall
// be able to safely make assumptions about a successfully received message.
//
// ~~~mermaid
// architecture-beta
//  group frontend(internet)[Frontend]
//  service browser(internet)[Browser] in frontend
//
//  group backend(server)[Backend]
//  service server(server)[SnowballR Server] in backend
//  service db(database)[Database] in backend
//
//  group external(internet)[External Resources]
//  service fetcher1(internet)[External Paper Database 1] in external
//  service fetcher2(internet)[External Paper Database 2] in external
//
//  junction j1 in external
//  junction j2 in external
//
//  browser:R --> L:server
//
//  server:B --> T:db
//  server:R -- L:j1
//
//  j1:R -- L:j2
//  j1:B --> T:fetcher1
//  j2:B --> T:fetcher2
// ~~~
// The SnowballR application is split into a frontend and a backend. The
// frontend is a web page that runs in the browser of a client. The backend
// runs on a server and contains most if not all logic. It accesses a database
// to persist data and makes requests to external resources like paper
// databases.
//
// ~~~mermaid
// erDiagram
//  direction LR
//
//  Project 0+ -- 0+ User : "member of"
//  Project 1 -- 1 ProjectSettings : has
//  Project 1 -- 0+ ProjectPaper : contains
//  Project 1 -- 0+ Criterion : contains
//
//  ProjectSettings 0+ -- 1+ FetcherApi : "fetches from"
//
//  ProjectPaper 1 -- 0+ Review : has
//  ProjectPaper 1 -- 1 Paper : "refers to"
//
//  Review 0+ -- 1 User : by
//  Review 0+ -- 0+ Criterion : "ticks off"
//
//  User 1 -- 1 UserSettings : has
//  User 0+ -- 0+ Paper : "reading-list"
// ~~~
// This figure shows the relationships between entities/concepts of the
// SnowballR application. It is not the actual database schema SnowballR's
// backend is using and solely assists with understanding the broader picture.
//
// **Disclaimer:**
//
// Access control for these calls is not fully worked out yet. Due to this,
// the required role for any call may change at any time.
//
service SnowballR {
  // Query all available origins from which a paper may be sourced by the backend.
  // Each source is identified by a unique string and is later used to specify
  // which APIs shall be used by a project to collect papers. The list is
  // **guaranteed** to be **non-empty**, but **may change** at any time.
  //
  // ## Errors
  // No additional errors may occur.
  rpc GetAvailableFetcherApis(Nothing) returns (AvailableFetcherApis);

  // Create an account. The provided email **must not be already registered**
  // and **every field must not be blank**. If successful, login tokens are
  // provided which are automatically used by following calls.
  //
  // The password string is **required** to
  //
  // - be at least **eight characters long**,
  // - contain at least **two lower-case letters**,
  // - contain at least **two upper-case letters**,
  // - contain at least **two digits**,
  // - and contain at least **two special characters**.
  //
  // This call does not require the user to be authenticated.
  //
  // ## Errors
  // | Error Code | Description |
  // | :--- | :--- |
  // | `ALREADY_EXISTS` | The provided email is already registered. |
  // | `INVALID_ARGUMENT` | At least one input did not meet the requirements. The email needs to be a valid email, the password needs to meet the previously stated criteria and the first and last name must not be blank. |
  rpc Register(RegisterRequest) returns (Nothing);

  // If the email and password exactly match a user in the server's database, a
  // new set of login tokens is provided to authenticate as that user. Old
  // access and refresh tokens shall remain valid. These credentials are handled
  // automatically and do not need further attention.
  //
  // This call does not require the user to be authenticated.
  //
  // ## Errors
  // | Error Code | Description |
  // | :--- | :--- |
  // | `UNAUTHENTICATED` | The user does not exist or the password is incorrect. |
  // | `INVALID_ARGUMENT` | The email is not an actual email or no password is provided. |
  rpc Login(LoginRequest) returns (Nothing);

  // Revoke access through the currently used set of access and refresh token.
  // Other token pairs may not be affected.
  //
  // ## Errors
  // No additional errors may occur.
  rpc Logout(Nothing) returns (Nothing);

  // Acquire the client's authentication status. The result is **guaranteed** to
  // be **specified**.
  //
  // This call does not require the user to be authenticated.
  //
  // ## Errors
  // No additional errors may occur.
  rpc GetAuthenticationStatus(Nothing) returns (AuthenticationStatusResponse);

  // Upon presentation of a valid refresh token, a new set of login tokens
  // authenticating the owner of the token is issued. The new pair is
  // **guaranteed** to contain valid credentials. The refresh token **may
  // change** too. These credentials are handled automatically and do not need
  // further attention.
  //
  // Use this call if the access token is expired.
  // This call does not require the user to be authenticated using an access
  // token. Instead, the validity of the accompanying refresh token — which is
  // also set by `Register` and `Login` — is confirmed.
  //
  // ## Errors
  // | Error Code | Description |
  // | :--- | :--- |
  // | `UNAUTHENTICATED` | The refresh token is invalid. |
  rpc RenewSession(Nothing) returns (Nothing);

  // If the provided email address is registered as an active user, a
  // challenge/token is emailed to that address. That token must be sent
  // alongside a new password
  // (see [ResetPassword](#service-snowballr.SnowballR-ResetPassword)) in order
  // to update a lost or forgotten password.
  //
  // This call does not require the user to be authenticated.
  //
  // ## Errors
  // | Error Code | Description |
  // | :--- | :--- |
  // | `INVALID_ARGUMENT` | The email is not valid. This does **not** occur if a valid email is not yet registered. |
  rpc RequestPasswordReset(RequestPasswordResetRequest) returns (Nothing);

  // After requesting a password reset email using
  // [RequestPasswordReset](#service-snowballr.SnowballR-RequestPasswordReset),
  // this call may be used to actually set the new password. To verify the
  // ownership of the account, the token sent via email must also be provided
  // and valid. The new password must follow the same rules as during
  // [registration](#service-snowballr.SnowballR-Register).
  //
  // This call does not require the user to be authenticated.
  //
  // ## Errors
  // | Error Code | Description |
  // | :--- | :--- |
  // | `INVALID_ARGUMENT` | Either the provided token is invalid or the new password does not meet the rules specified in `Register`. |
  // | `FAILED_PRECONDITION` | The account trying to be reset is not in a state in which the password can be changed. |
  // | `DEADLINE_EXCEEDED` | The provided token is expired. |
  rpc ResetPassword(PasswordResetRequest) returns (Nothing);

  // Use the old password in order to set a new password.
  // The new password must follow the same rules as during
  // [registration](#service-snowballr.SnowballR-Register). This serves no
  // recovery purpose and is for user convenience only.
  //
  // ## Errors
  // | Error Code | Description |
  // | :--- | :--- |
  // | `INVALID_ARGUMENT` | The provided old password is not correct or the new password does not meet the rules specified in `Register`. |
  // | `UNAUTHENTICATED` | The user is not signed in. |
  rpc ChangePassword(PasswordChangeRequest) returns (Nothing);

  // Get all registered users.
  //
  // ## Errors
  // | Error Code | Description |
  // | :--- | :--- |
  // | `PERMISSION_DENIED` | The user is not an admin. |
  // | `UNAUTHENTICATED` | The user is not signed in. |
  rpc GetAllUsers(Nothing) returns (User.List);

  // Get the currently authenticated user by looking up the provided access
  // token. If properly authenticated, it is **guaranteed** to return a valid
  // user.
  //
  // ## Errors
  // | Error Code | Description |
  // | :--- | :--- |
  // | `UNAUTHENTICATED` | The user is not signed in. |
  rpc GetCurrentUser(Nothing) returns (User);

  // Get a user by its id.
  //
  // ## Errors
  // | Error Code | Description |
  // | :--- | :--- |
  // | `UNAUTHENTICATED` | The user is not signed in. |
  // | `NOT_FOUND` | No user with the provided id was found. |
  rpc GetUserById(Id) returns (User);

  // Get the user with the specified email address.
  // 
  // ## Errors
  // | Error Code | Description |
  // | :--- | :--- |
  // | `UNAUTHENTICATED` | The user is not signed in. |
  // | `NOT_FOUND` | No user with the provided email was found. |
  // | `INVALID_ARGUMENT` | The email was invalid. |
  rpc GetUserByEmail (Email) returns (User);

  // Update all in the field-mask specified attributes of the user with the
  // provided id except for `status`. The `role` may be updated by a server
  // admin using this call. The updated user is returned and **guaranteed** to
  // be specified.
  //
  // ## Errors
  // | Error Code | Description |
  // | :--- | :--- |
  // | `UNAUTHENTICATED` | The user is not signed in. |
  // | `NOT_FOUND` | No user with the provided id was found. |
  // | `INVALID_ARGUMENT` | The first name, last name, role or email was invalid. |
  // | `PERMISSION_DENIED` | The user is not allowed to modify the user with the specified id. |
  // | `ALREADY_EXISTS` | The updated email is already registered. |
  rpc UpdateUser(User.Update) returns (User);

  // Prevent the user with the provided id from logging in. It is not fully
  // deleted from the database though, but not considered an **active user**
  // anymore.
  //
  // ## Errors
  // | Error Code | Description |
  // | :--- | :--- |
  // | `UNAUTHENTICATED` | The user is not signed in. |
  // | `NOT_FOUND` | No user with the provided id was found. |
  // | `PERMISSION_DENIED` | The user is not allowed to delete the user with the specified id. |
  // | `FAILED_PRECONDITION` | The user to be deleted is an admin. |
  rpc SoftDeleteUser(Id) returns (Nothing);

  // Allow a previously soft-deleted user to login again.
  // The calling user is **required to be admin**.
  //
  // ## Errors
  // | Error Code | Description |
  // | :--- | :--- |
  // | `UNAUTHENTICATED` | The user is not signed in. |
  // | `NOT_FOUND` | No user with the provided id was found. |
  // | `PERMISSION_DENIED` | The user is not allowed to restore the user with the specified id. |
  rpc SoftUndeleteUser(Id) returns (Nothing);

  // Get the user-specific settings for the calling user. It is **guaranteed**
  // that the result is **specified**.
  //
  // ## Errors
  // | Error Code | Description |
  // | :--- | :--- |
  // | `UNAUTHENTICATED` | The user is not signed in. |
  rpc GetUserSettings(Nothing) returns (UserSettings);

  // Update all in the field-mask specified attributes of the calling user's
  // user settings. The updated user settings are returned and **guaranteed** to
  // be **specified**.
  //
  // ## Errors
  // | Error Code | Description |
  // | :--- | :--- |
  // | `UNAUTHENTICATED` | The user is not signed in. |
  // | `INVALID_ARGUMENT` | The updated settings are invalid. |
  rpc UpdateUserSettings(UserSettings.Update) returns (UserSettings);

  // Get all project papers the requesting user is able to review. It is not
  // given that the returned papers belong to the same project.
  // The returned paper list **may be empty** if no papers can be reviewed.
  //
  // ## Errors
  // | Error Code | Description |
  // | :--- | :--- |
  // | `UNAUTHENTICATED` | The user is not signed in. |
  rpc GetAllPapersToReview(Nothing) returns (Project.Paper.List);

  // Get all project papers from a specific project identified by the id, the
  // requesting user is able to review.
  // The returned paper list **may be empty** if no papers can be reviewed.
  //
  // ## Errors
  // | Error Code | Description |
  // | :--- | :--- |
  // | `UNAUTHENTICATED` | The user is not signed in. |
  // | `NOT_FOUND` | No project with the provided id was found. |
  // | `PERMISSION_DENIED` | The user is not a member of the specified project or is not allowed to review. |
  rpc GetPapersToReviewForProject(Id) returns (Project.Paper.List);

  // Get the project paper with the succeeding _local_ id of the project paper
  // identified by the provided _global_ id. It is **guaranteed** that the
  // returned paper is in the same project as the provided one.
  //
  // ## Errors
  // | Error Code | Description |
  // | :--- | :--- |
  // | `UNAUTHENTICATED` | The user is not signed in. |
  // | `NOT_FOUND` | No paper with the provided id was found. |
  // | `FAILED_PRECONDITION` | There was no next paper. |
  // | `PERMISSION_DENIED` | The user is not a member of the specified project. |
  rpc GetNextPaper(Id) returns (Project.Paper);

  // Get the next project paper the calling user is able to review. Papers with
  // lower local ids are preferred. It is **guaranteed** that the returned paper
  // is in the same project as the one provided.
  //
  // ## Errors
  // | Error Code | Description |
  // | :--- | :--- |
  // | `UNAUTHENTICATED` | The user is not signed in. |
  // | `NOT_FOUND` | No paper with the provided id was found. |
  // | `FAILED_PRECONDITION` | There was no next paper available to review. |
  // | `PERMISSION_DENIED` | The user is not a member of the specified project or is not allowed to review. |
  rpc GetNextPaperToReview(Id) returns (Project.Paper);

  // Get the project paper with the preceding _local_ id of the project paper
  // identified by the provided _global_ id. It is **guaranteed** that the
  // returned paper is in the same project as the provided one.
  //
  // ## Errors
  // | Error Code | Description |
  // | :--- | :--- |
  // | `UNAUTHENTICATED` | The user is not signed in. |
  // | `NOT_FOUND` | No paper with the provided id was found. |
  // | `FAILED_PRECONDITION` | There was no previous paper. |
  // | `PERMISSION_DENIED` | The user is not a member of the specified project. |
  rpc GetPreviousPaper(Id) returns (Project.Paper);

  // Get the list of papers on the reading list of the calling user.
  //
  // ## Errors
  // | Error Code | Description |
  // | :--- | :--- |
  // | `UNAUTHENTICATED` | The user is not signed in. |
  rpc GetReadingList(Nothing) returns (Paper.List);

  // Return whether the paper with the provided id is on the calling
  // user's reading list.
  //
  // ## Errors
  // | Error Code | Description |
  // | :--- | :--- |
  // | `UNAUTHENTICATED` | The user is not signed in. |
  // | `NOT_FOUND` | The specified paper does not exist. |
  rpc IsPaperOnReadingList(Id) returns (BoolValue);

  // Add the paper with the provided id to the calling user's reading list. If
  // the paper is already on the user's reading list, nothing will be changed
  // and **no error** will be returned.
  //
  // ## Errors
  // | Error Code | Description |
  // | :--- | :--- |
  // | `UNAUTHENTICATED` | The user is not signed in. |
  // | `NOT_FOUND` | No paper with the provided id was found. |
  rpc AddPaperToReadingList(Id) returns (Nothing);

  // Remove the paper with the provided id from the calling user's reading
  // list.
  //
  // ## Errors
  // | Error Code | Description |
  // | :--- | :--- |
  // | `UNAUTHENTICATED` | The user is not signed in. |
  // | `NOT_FOUND` | The specified paper does not exist. |
  rpc RemovePaperFromReadingList(Id) returns (Nothing);

  // Get a list of all projects to which the user with the provided id is
  // invited.
  //
  // ## Errors
  // | Error Code | Description |
  // | :--- | :--- |
  // | `UNAUTHENTICATED` | The user is not signed in. |
  // | `NOT_FOUND` | No user with the provided id was found. |
  // | `PERMISSION_DENIED` | The user is not allowed to view the invitations of the specified user. |
  rpc GetPendingInvitationsForUser(Id) returns (Project.List);

  // Invite a user to a project. The provided project has to be active, meaning
  // it is neither deleted nor archived. If a user with the provided email
  // already exists, an invitation is sent. The user is **not** instantly added
  // to the project. The user may then join the project using the invitation
  // displayed in the frontend. If, however, no user with the provided email
  // exists, an invitation email is sent out. The recipient may register and
  // **then accept the invitation. The calling user is required to be a project
  // **admin**.
  //
  // ## Errors
  // | Error Code | Description |
  // | :--- | :--- |
  // | `UNAUTHENTICATED` | The user is not signed in. |
  // | `NOT_FOUND` | No project with the provided id was found. |
  // | `FAILED_PRECONDITION` | The project is not active, meaning it is either archived or deleted. |
  // | `PERMISSION_DENIED` | The user is not allowed to invite users to the specified project. |
  // | `INVALID_ARGUMENT` | The provided email is not a valid email address. |
  rpc InviteUserToProject(Project.Member.Invite) returns (Nothing);

  // Get a list of all users with a pending invitation to the provided project.
  // If the `id` field is specified, it is **guaranteed** that the user exists.
  // If, however, the `id` is blank, the user was invited by email and has not
  // yet registered.
  //
  // ## Errors
  // | Error Code | Description |
  // | :--- | :--- |
  // | `UNAUTHENTICATED` | The user is not signed in. |
  // | `NOT_FOUND` | No project with the provided id was found. |
  // | `PERMISSION_DENIED` | The user is not allowed to view the pending invitations of the specified project. |
  rpc GetPendingInvitationsForProject(Id) returns (User.List);

  // Get a list of all members of the specified project. The calling user is
  // included. Pending invitations are **not** included.
  //
  // ## Errors
  // | Error Code | Description |
  // | :--- | :--- |
  // | `UNAUTHENTICATED` | The user is not signed in. |
  // | `NOT_FOUND` | No project with the provided id was found. |
  // | `PERMISSION_DENIED` | The user is not allowed to view the members of the specified project. |
  rpc GetProjectMembers(Id) returns (Project.Member.List);

  // Remove the specified user from the given project. If the user is not part
  // of the project, nothing happens. The calling user is **required to be a
  // project admin**. A project admin cannot be removed from the project.
  //
  // ## Errors
  // | Error Code | Description |
  // | :--- | :--- |
  // | `UNAUTHENTICATED` | The user is not signed in. |
  // | `NOT_FOUND` | No project with the provided project id or user with the provided user id was found. |
  // | `PERMISSION_DENIED` | The user is not allowed to remove the specified user from the project. |
  // | `FAILED_PRECONDITION` | The user to be removed is the last project admin. |
  rpc RemoveProjectMember(Project.Member.Remove) returns (Nothing);

  // Change the role of the user with the provided id within the given project.
  // The new role **must not** be **unspecified**.
  // The calling user is **required to be a project admin**.
  //
  // ## Errors
  // | Error Code | Description |
  // | :--- | :--- |
  // | `UNAUTHENTICATED` | The user is not signed in. |
  // | `INVALID_ARGUMENT` | The provided role is unspecified. |
  // | `PERMISSION_DENIED` | The user is not allowed to change the role of the specified user in the project. This could for example be the case if trying to demote a project admin. |
  // | `NOT_FOUND` | No project with the provided id or user with the provided id was found. |
  // | `FAILED_PRECONDITION` | The user to be updated is not a member of the specified project. |
  rpc UpdateProjectMemberRole(Project.Member.Update) returns (Nothing);

  // Get a list of all active projects.
  //
  // ## Errors
  // | Error Code | Description |
  // | :--- | :--- |
  // | `UNAUTHENTICATED` | The user is not signed in. |
  // | `PERMISSION_DENIED` | The user is not allowed to view all global projects. |
  rpc GetAllProjects(Nothing) returns (Project.List);

  // Get a list of all projects that are marked as deleted.
  //
  // ## Errors
  // | Error Code | Description |
  // | :--- | :--- |
  // | `UNAUTHENTICATED` | The user is not signed in. |
  // | `PERMISSION_DENIED` | The user is not allowed to view all global deleted projects. |
  rpc GetAllDeletedProjects(Nothing) returns (Project.List);

  // Get a list of all projects the provided user is a member of and that are
  // marked as deleted.
  //
  // ## Errors
  // | Error Code | Description |
  // | :--- | :--- |
  // | `UNAUTHENTICATED` | The user is not signed in. |
  // | `NOT_FOUND` | No user with the provided id was found. |
  // | `PERMISSION_DENIED` | The user is not allowed to view the deleted projects of the specified user. |
  rpc GetAllDeletedProjectsForUser(Id) returns (Project.List);

  // Get a list of all projects that are marked as archived.
  //
  // ## Errors
  // | Error Code | Description |
  // | :--- | :--- |
  // | `UNAUTHENTICATED` | The user is not signed in. |
  // | `PERMISSION_DENIED` | The user is not allowed to view all global archived projects. |
  rpc GetAllArchivedProjects(Nothing) returns (Project.List);

  // Get a list of all active projects the provided user is a member of. Pending
  // invitations are **not** included.
  //
  // ## Errors
  // | Error Code | Description |
  // | :--- | :--- |
  // | `UNAUTHENTICATED` | The user is not signed in. |
  // | `NOT_FOUND` | No user with the provided id was found. |
  // | `PERMISSION_DENIED` | The user is not allowed to view the projects of the specified user. |
  rpc GetAllProjectsForUser(Id) returns (Project.List);

  // Get a list of all projects the provided user is a member of and that are
  // marked as archived.
  //
  // ## Errors
  // | Error Code | Description |
  // | :--- | :--- |
  // | `UNAUTHENTICATED` | The user is not signed in. |
  // | `NOT_FOUND` | No user with the provided id was found. |
  // | `PERMISSION_DENIED` | The user is not allowed to view the archived projects of the specified user. |
  rpc GetAllArchivedProjectsForUser(Id) returns (Project.List);

  // Create a new project. Every field must be **specified** and **non-blank**.
  // The calling user is automatically a member of that project with the
  // "project admin" role (`MEMBER_ROLE_ADMIN`). If the project was successfully
  // created, it is returned and **guaranteed** to be **specified**.
  //
  // ## Errors
  // | Error Code | Description |
  // | :--- | :--- |
  // | `UNAUTHENTICATED` | The user is not signed in. |
  // | `INVALID_ARGUMENT` | The provided project name was blank. |
  rpc CreateProject(Project.Create) returns (Project);

  // Get a project by its id.
  //
  // ## Errors
  // | Error Code | Description |
  // | :--- | :--- |
  // | `UNAUTHENTICATED` | The user is not signed in. |
  // | `NOT_FOUND` | No project with the provided id was found. |
  // | `PERMISSION_DENIED` | The user is not a member of the specified project. |
  rpc GetProjectById(Id) returns (Project);

  // Update the project with the given id using the provided data. Only
  // fields specified in the field-mask will be updated. The following fields
  // cannot be modified: `current_stage`, `max_stage`. The updated project
  // is returned and **guaranteed** to be **specified**. The calling user is
  // **required to be a project admin**.
  //
  // ## Errors
  // | Error Code | Description |
  // | :--- | :--- |
  // | `UNAUTHENTICATED` | The user is not signed in. |
  // | `NOT_FOUND` | No project with the provided id was found. |
  // | `INVALID_ARGUMENT` | Invalid name, status or project settings specified. |
  // | `PERMISSION_DENIED` | The user is not allowed to update the project. |
  // | `FAILED_PRECONDITION` | The project is not active. |
  rpc UpdateProject(Project.Update) returns (Project);

  // Export the provided project in the given format. A blob is returned.
  // The export includes everything for it to be reimported and be
  // indistinguishable from the original project.
  //
  // ## Errors
  // | Error Code | Description |
  // | :--- | :--- |
  // | `UNAUTHENTICATED` | The user is not signed in. |
  // | `INVALID_ARGUMENT` | The specified format is invalid. |
  // | `NOT_FOUND` | No project with the provided id was found. |
  // | `PERMISSION_DENIED` | The user is not a member of the specified project. |
  rpc ExportProject(ExportRequest) returns (Blob);

  // Mark a project as deleted. It is not fully deleted from the database and
  // may later be restored.
  // The calling user is **required to be a project admin**.
  // 
  // ## Errors
  // | Error Code | Description |
  // | :--- | :--- |
  // | `UNAUTHENTICATED` | The user is not signed in. |
  // | `NOT_FOUND` | No project with the provided id was found. |
  // | `PERMISSION_DENIED` | The user is not an admin of the specified project. |
  rpc SoftDeleteProject(Id) returns (Nothing);

  // Restore a previously deleted project to the **active** state.
  // The calling user is **required to be a project admin**.
  //
  // ## Errors
  // | Error Code | Description |
  // | :--- | :--- |
  // | `UNAUTHENTICATED` | The user is not signed in. |
  // | `NOT_FOUND` | No project with the provided id was found. |
  // | `PERMISSION_DENIED` | The user is not an admin of the specified project. |
  rpc SoftUndeleteProject(Id) returns (Nothing);

  // Retrieve information about the specified project. Only attributes
  // specified in the field-mask are included in the response.
  //
  // ## Errors
  // | Error Code | Description |
  // | :--- | :--- |
  // | `UNAUTHENTICATED` | The user is not signed in. |
  // | `NOT_FOUND` | No project with the provided id was found. |
  // | `PERMISSION_DENIED` | The user is not a member of the specified project. |
  rpc GetProjectInformation(Project.Information.Get)
      returns (Project.Information);

  // Get the distribution of paper decisions within a project's stage, meaning
  // it returns the number of papers for each possible `PaperDecision` in the
  // specified stage.
  //
  // ## Errors
  // | Error Code | Description |
  // | :--- | :--- |
  // | `UNAUTHENTICATED` | The user is not signed in. |
  // | `NOT_FOUND` | No project with the provided id was found or the specified stage does not exist. |
  // | `PERMISSION_DENIED` | The user is not a member of the specified project. |
  rpc GetDecisionStatisticsForStage(Project.Information.DecisionStatistics.Get)
      returns (Project.Information.DecisionStatistics);

  // Get a criterion by its id.
  //
  // ## Errors
  // | Error Code | Description |
  // | :--- | :--- |
  // | `UNAUTHENTICATED` | The user is not signed in. |
  // | `NOT_FOUND` | No criterion with the provided id was found. |
  // | `PERMISSION_DENIED` | The user is not a member of the project the criterion belongs to. |
  rpc GetCriterionById(Id) returns (Criterion);

  // Get all criteria associated with a given project.
  //
  // ## Errors
  // | Error Code | Description |
  // | :--- | :--- |
  // | `UNAUTHENTICATED` | The user is not signed in. |
  // | `NOT_FOUND` | No project with the provided id was found. |
  // | `PERMISSION_DENIED` | The user is not a member of the specified project. |
  rpc GetAllCriteriaForProject(Id) returns (Criterion.List);

  // Create a new criterion. Every field **must be specified** and
  // **non-blank**. If successful, the newly created criterion is returned. The
  // calling user is **required to be a project admin**.
  //
  // ## Errors
  // | Error Code | Description |
  // | :--- | :--- |
  // | `UNAUTHENTICATED` | The user is not signed in. |
  // | `INVALID_ARGUMENT` | At least one field in the provided criterion was blank. |
  // | `NOT_FOUND` | No project with the provided id was found. |
  // | `PERMISSION_DENIED` | The user is not an admin of the specified project. |
  rpc CreateCriterion(Criterion.Create) returns (Criterion);

  // Update the criterion with the given id using the provided data. Only
  // fields specified in the field-mask will be updated. The updated criterion
  // is returned and **guaranteed** to be **specified**.
  // The calling user is **required to be a project admin**.
  //
  // ## Errors
  // | Error Code | Description |
  // | :--- | :--- |
  // | `UNAUTHENTICATED` | The user is not signed in. |
  // | `NOT_FOUND` | No criterion with the provided id was found. |
  // | `INVALID_ARGUMENT` | At least one field in the provided update was blank. |
  // | `PERMISSION_DENIED` | The user is not an admin of the project the criterion belongs to. |
  rpc UpdateCriterion(Criterion.Update) returns (Criterion);

  // Permanently delete the specified criterion. All references to it will also
  // be removed. **This cannot be undone**.
  // The calling user is **required to be a project admin**.
  //
  // ## Errors
  // | Error Code | Description |
  // | :--- | :--- |
  // | `UNAUTHENTICATED` | The user is not signed in. |
  // | `NOT_FOUND` | No criterion with the provided id was found. |
  // | `PERMISSION_DENIED` | The user is not an admin of the project the criterion belongs to. |
  rpc DeleteCriterion(Id) returns (Nothing);

  // Get a project paper by its id.
  //
  // ## Errors
  // | Error Code | Description |
  // | :--- | :--- |
  // | `UNAUTHENTICATED` | The user is not signed in. |
  // | `NOT_FOUND` | No project paper with the provided id was found. |
  // | `PERMISSION_DENIED` | The user is not a member of the project the paper belongs to. |
  rpc GetProjectPaperById(Id) returns (Project.Paper);

  // Get a project paper using the project id and the local id within that
  // project. The local id is only **unique within its project**, **not**,
  // however, **globally**. Prefer `GetProjectPaperById` wherever possible.
  //
  // ## Errors
  // | Error Code | Description |
  // | :--- | :--- |
  // | `UNAUTHENTICATED` | The user is not signed in. |
  // | `NOT_FOUND` | No project paper with the provided relative id was found. Either the project does not exist or the relative id was not found within the project. |
  // | `PERMISSION_DENIED` | The user is not a member of the project the paper belongs to. |
  rpc GetProjectPaperByRelativeId(Project.Paper.Get) returns (Project.Paper);

  // Retrieve all project papers associated with the given project.
  //
  // ## Errors
  // | Error Code | Description |
  // | :--- | :--- |
  // | `UNAUTHENTICATED` | The user is not signed in. |
  // | `NOT_FOUND` | No project with the provided id was found. |
  // | `PERMISSION_DENIED` | The user is not a member of the specified project. |
  rpc GetAllProjectPapersForProject(Id) returns (Project.Paper.List);

  // Add the provided paper to the given project within the specified stage.
  // The stage must be lesser or equal to the projects `max_stage`.
  // The calling user is **required to be a project admin**.
  //
  // ## Errors
  // | Error Code | Description |
  // | :--- | :--- |
  // | `UNAUTHENTICATED` | The user is not signed in. |
  // | `NOT_FOUND` | Either the project or the paper with the provided ids were not found. |
  // | `INVALID_ARGUMENT` | The provided stage does not exist in the project. This could mean that stage was less than zero or greater than `max_stage`. |
  // | `ALREADY_EXISTS` | The specified paper already exists within the provided project. |
  // | `PERMISSION_DENIED` | The user is not part of the specified project or is not a project admin. |
  rpc AddPaperToProject(Project.Paper.Add) returns (Project.Paper);

  // Update the project paper with the specified id using the provided data.
  // Only fields specified in the field-mask will be updated, excluding
  // `local_id`, `decision`, `stage` and `reviews`. Furthermore, the composited paper
  // cannot be modified, resort to the `UpdatePaper` call for this. The updated
  // project will be returned and **guaranteed** to be **specified**.
  // The calling user is **required to be a project admin**.
  //
  // ## Errors
  // | Error Code | Description |
  // | :--- | :--- |
  // | `UNAUTHENTICATED` | The user is not signed in. |
  // | `NOT_FOUND` | No project paper with the provided id was found. |
  // | `PERMISSION_DENIED` | The user is not admin of the project the project paper belongs to. |
  rpc UpdateProjectPaper(Project.Paper.Update) returns (Project.Paper);

  // Permanently remove the specified project paper from the project. All
  // references to this project paper will also be deleted. **This cannot be
  // undone**.
  // The calling user is **required to be a project admin**.
  //
  // ## Errors
  // | Error Code | Description |
  // | :--- | :--- |
  // | `UNAUTHENTICATED` | The user is not signed in. |
  // | `PERMISSION_DENIED` | The user is not an admin of the project the project paper belongs to. |
  rpc RemovePaperFromProject(Id) returns (Nothing);

  // Get a review by its id.
  //
  // ## Errors
  // | Error Code | Description |
  // | :--- | :--- |
  // | `UNAUTHENTICATED` | The user is not signed in. |
  // | `NOT_FOUND` | No review with the provided id was found. |
  // | `PERMISSION_DENIED` | The user is not a member of the project the review belongs to. |
  rpc GetReviewById(Id) returns (Review);

  // Retrieve all reviews for a specific project paper.
  //
  // ## Errors
  // | Error Code | Description |
  // | :--- | :--- |
  // | `UNAUTHENTICATED` | The user is not signed in. |
  // | `NOT_FOUND` | No project paper with the provided id was found. |
  // | `PERMISSION_DENIED` | The user is not a member of the project the project paper belongs to. |
  rpc GetAllReviewsForProjectPaper(Id) returns (Review.List);

  // Create a new review for a specific project paper. Every field must be
  // **specified** and **non-blank**. `selected_criteria_ids` may be empty. The
  // calling user must not currently have another review for this project paper.
  // The paper must also be currently `UNREVIEWED` or `IN_REVIEW`. The user also
  // has to be a member of the same project the project paper belongs to. If
  // successful, the created review is returned.
  //
  // ## Errors
  // | Error Code | Description |
  // | :--- | :--- |
  // | `UNAUTHENTICATED` | The user is not signed in. |
  // | `NOT_FOUND` | No project paper with the provided id was found. |
  // | `ALREADY_EXISTS` | The user already has a review for the specified project paper. |
  // | `FAILED_PRECONDITION` | The project paper is not in the `UNREVIEWED` or `IN_REVIEW` state. |
  // | `PERMISSION_DENIED` | The user is not a member of the project the project paper belongs to. |
  // | `INVALID_ARGUMENT` | At least one field in the provided review (except for `selected_criteria_ids`) was blank. This could be an invalid `decision` or `selected_criteria_ids`. |
  rpc CreateReview(Review.Create) returns (Review);

  // Update the review with the given id using the provided data. Only fields
  // specified in the field-mask will be updated, excluding `user_id`. The
  // updated review is returned and **guaranteed** to be **specified**. Only the
  // owner of a review is allowed to update a review. The owner of the review
  // has to be a member of the project the review is in, in order to update
  // it. A user is the owner of a review if the review's `user_id` matches the
  // user's `id`.
  //
  // ## Errors
  // | Error Code | Description |
  // | :--- | :--- |
  // | `UNAUTHENTICATED` | The user is not signed in. |
  // | `NOT_FOUND` | No review with the provided id was found. |
  // | `INVALID_ARGUMENT` | At least one field in the provided update was blank. This could be an invalid `decision` or an empty or invalid `selected_criteria_ids`. |
  // | `PERMISSION_DENIED` | The user is either not the owner of the review or not a member of the project the review belongs to. |
  // | `FAILED_PRECONDITION` | The project paper is in a state where no further review modifications are allowed. |
  rpc UpdateReview(Review.Update) returns (Review);

  // Permanently remove the specified review from the project paper. **This
  // cannot be undone**. Only the owner of a review is allowed to delete a
  // review. The owner of the review has to be a member of the project the
  // review is in, in order to remove it. A user is the owner of a review if the
  // review's `user_id` matches the user's `id`.
  //
  // ## Errors
  // | Error Code | Description |
  // | :--- | :--- |
  // | `UNAUTHENTICATED` | The user is not signed in. |
  // | `NOT_FOUND` | No review with the provided id was found. |
  // | `PERMISSION_DENIED` | The user is either not the owner of the review or not a member of the project the review belongs to. |
  // | `FAILED_PRECONDITION` | The project paper is in a state where reviews are not allowed to be deleted. |
  rpc DeleteReview(Id) returns (Nothing);

  // Get a paper by its id.
  //
  // ## Errors
  // | Error Code | Description |
  // | :--- | :--- |
  // | `UNAUTHENTICATED` | The user is not signed in. |
  // | `NOT_FOUND` | No paper with the provided id was found. |
  rpc GetPaperById(Id) returns (Paper);

  // Create a paper using the given data. The `id` will be ignored and set by
  // the server. All fields may be blank. The created paper will be returned.
  //
  // ## Errors
  // | Error Code | Description |
  // | :--- | :--- |
  // | `UNAUTHENTICATED` | The user is not signed in. |
  // | `INVALID_ARGUMENT` | At least one field in the provided paper was invalid. |
  rpc CreatePaper(Paper) returns (Paper);

  // Update the paper with the given id using the provided data. Only
  // fields specified in the field-mask will be updated, excluding `has_pdf`.
  // The updated paper is returned and **guaranteed** to be **specified**.
  //
  // ## Errors
  // | Error Code | Description |
  // | :--- | :--- |
  // | `UNAUTHENTICATED` | The user is not signed in. |
  // | `NOT_FOUND` | No paper with the provided id was found. |
  // | `INVALID_ARGUMENT` | At least one field in the provided paper was invalid. |
  // | `PERMISSION_DENIED` | The user is not allowed to update the specified paper. |
  rpc UpdatePaper(Paper.Update) returns (Paper);

  // Get a list of papers that are referred to by the provided paper.
  //
  // ## Errors
  // | Error Code | Description |
  // | :--- | :--- |
  // | `UNAUTHENTICATED` | The user is not signed in. |
  // | `NOT_FOUND` | No paper with the provided id was found. |
  rpc GetForwardReferencedPapers(Id) returns (Paper.List);

  // Get a list of papers that are referring to the provided paper.
  //
  // ## Errors
  // | Error Code | Description |
  // | :--- | :--- |
  // | `UNAUTHENTICATED` | The user is not signed in. |
  // | `NOT_FOUND` | No paper with the provided id was found. |
  rpc GetBackwardReferencedPapers(Id) returns (Paper.List);

  // Get a paper's PDF as a blob.
  //
  // ## Errors
  // | Error Code | Description |
  // | :--- | :--- |
  // | `UNAUTHENTICATED` | The user is not signed in. |
  // | `NOT_FOUND` | No paper with the provided id was found. |
  // | `FAILED_PRECONDITION` | The paper has no PDF attached to it. See [`paper.has_pdf`](#message-snowballr.Paper). |
  rpc GetPaperPdf(Id) returns (Blob);

  // Set or overwrite the PDF of the specified paper. This call may also be
  // used to remove the PDF of a paper by not specifying the `pdf` field.
  // The paper's `has_pdf` field is automatically updated by the server.
  //
  // ## Errors
  // | Error Code | Description |
  // | :--- | :--- |
  // | `UNAUTHENTICATED` | The user is not signed in. |
  // | `NOT_FOUND` | No paper with the provided id was found. |
  // | `RESOURCE_EXHAUSTED` | The provided PDF was declined by the server. A possible reason could be, that it was too large. |
  // | `INVALID_ARGUMENT` | The provided PDF does not seem to be in the correct format. |
  rpc SetPaperPdf(Paper.PdfUpdate) returns (Nothing);
}

message AvailableFetcherApis {
  repeated string fetcher_apis = 1;
}
