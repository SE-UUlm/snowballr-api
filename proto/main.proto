syntax = "proto3";
package snowballr;

import "authentication.proto";
import "base.proto";
import "criterion.proto";
import "export.proto";
import "paper.proto";
import "project.proto";
import "review.proto";
import "user.proto";
import "user_settings.proto";

// The set of API calls the SnowballR web application uses to communicate with
// the backend.
// SnowballR is a tool aiming to assist in scientific research by organizing
// and managing structured literature reviews. The application is split into
// a web frontend and a backend on a central server keeping track of all data.
// This service represents all available interactions between this frontend and
// backend.
// 
// Unless stated otherwise, **every** call **requires** the user to be
// **authenticated**. This shall be achieved by providing a valid access token
// assigned by the server (see [Login](#service-snowballr.SnowballR-Login)) in
// the `Authorization` header.
// 
// Every call looking up an entity using a unique identifier may fail with a
// `NOT_FOUND` error if no entity with the provided identifier could be located.
// This also includes calls returning data based on the looked up entity.
// Every enum contains a `_UNSPECIFIED` variant indicating its absence.
// If any other variant is present, the field is considered to be _specified_.
// The word _guaranteed_ may only convey meaning in the context of this
// contract. Due to the nature of the underlying network communication, a result
// may never be really guaranteed and proper error handling is advised. In the
// following, _guaranteed_ shall denote a situation in which the client shall
// be able to safely make assumptions about a successfully received message.
// 
// ~~~mermaid
// architecture-beta
//  group frontend(internet)[Frontend]
//  service browser(internet)[Browser] in frontend
// 
//  group backend(server)[Backend]
//  service server(server)[SnowballR Server] in backend
//  service db(database)[Database] in backend
//
//  group external(internet)[External Resources]
//  service fetcher1(internet)[External Paper Database 1] in external
//  service fetcher2(internet)[External Paper Database 2] in external
// 
//  junction j1 in external
//  junction j2 in external
// 
//  browser:R --> L:server
// 
//  server:B --> T:db
//  server:R -- L:j1
// 
//  j1:R -- L:j2
//  j1:B --> T:fetcher1
//  j2:B --> T:fetcher2
// ~~~
// The SnowballR application is split into a frontend and a backend. The
// frontend is a web page that runs in the browser of a client. The backend
// runs on a server and contains most if not all logic. It accesses a database
// to persist data and makes requests to external resources like paper
// databases.
//
// ~~~mermaid
// erDiagram
//  direction LR
// 
//  Project 0+ -- 0+ User : "member of"
//  Project 1 -- 1 ProjectSettings : has
//  Project 1 -- 0+ ProjectPaper : contains
//  Project 1 -- 0+ Criterion : contains
// 
//  ProjectSettings 0+ -- 1+ FetcherApi : "fetches from"
// 
//  ProjectPaper 1 -- 0+ Review : has
//  ProjectPaper 1 -- 1 Paper : "refers to"
// 
//  Review 0+ -- 1 User : by
//  Review 0+ -- 0+ Criterion : "ticks off"
// 
//  User 1 -- 1 UserSettings : has
//  User 0+ -- 0+ Paper : "reading-list"
// ~~~
// This figure shows the relationships between entities/concepts of the
// SnowballR application. It is not the actual database schema SnowballR's
// backend is using and solely assists with understanding the broader picture.
//
// **Disclaimer:**
//
// Access control for these calls is not fully worked out yet. Due to this,
// the required role for any call may change at any time.
// 
service SnowballR {
  // Query all available origins a paper may be sourced from by the backend.
  // Each source is identified by a unique string and is later used to specify
  // which APIs shall be used by a project to collect papers. The list is
  // **guaranteed** to be **non-empty** but **may change** at any time.
  rpc GetAvailableFetcherApis (Nothing) returns (AvailableFetcherApis);
  
  // Create an account for a SnowballR instance. The provided
  // email **must not be already registered** and
  // **every field must not be empty**. If successful, login tokens are
  // provided which are automatically used by following calls.
  // 
  // The password string is **required** to
  // 
  // - be at least **eight characters long**,
  // - contain at least **two lower-case letter**,
  // - contain at least **two upper-case letter**,
  // - contain at least **two digit**,
  // - and contain at least **two special character**.
  // 
  // This call does not require the user to be authenticated.
  rpc Register (RegisterRequest) returns (Nothing);

  // If email and password exactly match a user in the server's database, a
  // new set of login tokens is provided to authenticate as that user. Old
  // access and refresh tokens shall remain valid. These credentials are handled
  // automatically and do not need further attention.
  //
  // This call will only fail with `UNAUTHENTICATED`, even so when no user
  // with the provided email exists.
  // 
  // This call does not require the user to be authenticated.
  rpc Login (LoginRequest) returns (Nothing);
  
  // Revoke access through the currently used set of access and refresh token.
  // Other token pairs may not be affected.
  rpc Logout (Nothing) returns (Nothing);
  
  // Acquire the clients authentication status. The result is **guaranteed** to
  // be **specified**.
  //
  // This call does not require the user to be authenticated.
  rpc GetAuthenticationStatus (Nothing) returns (AuthenticationStatusResponse);

  // Upon presentation of a valid refresh token, a new set of login tokens
  // authenticating the owner of the token is issued. The new pair is
  // **guaranteed** to contain valid credentials. The refresh token **may
  // change** too. These credentials are handled automatically and do not need
  // further attention.
  //
  // Use this call if the access token is expired.
  // This call does not require the user to be authenticated.
  rpc RenewSession (Nothing) returns (Nothing);

  // If the provided email address is registered as an active user, a
  // challange/token is emailed to that address. That token must be sent
  // alongside a new password
  // (see [ResetPassword](#service-snowballr.SnowballR-ResetPassword)) in order
  // to update a lost or forgotten password.
  //
  // This call does not require the user to be authenticated.
  rpc RequestPasswordReset (RequestPasswordResetRequest) returns (Nothing);
  
  // After requesting a password reset email using
  // [RequestPasswordReset](#service-snowballr.SnowballR-RequestPasswordReset),
  // this call may be used to actually set the new password. To verify the
  // ownership of the account, the token sent via email must also be provided
  // and valid. The new password must follow the same rules as during
  // [registration](#service-snowballr.SnowballR-Register).
  //
  // This call does not require the user to be authenticated.
  rpc ResetPassword (PasswordResetRequest) returns (Nothing);

  // Use the old password in order to set a new password.
  // The new password must follow the same rules as during
  // [registration](#service-snowballr.SnowballR-Register). This serves no
  // recovery purpose and is for user convenience only.
  rpc ChangePassword (PasswordChangeRequest) returns (Nothing);

  // Get all registered users of a SnowballR instance.
  rpc GetAllUsers (Nothing) returns (User.List);

  // Get the currently authenticated user by looking up the provided access
  // token. If properly authenticated, it is **guaranteed** to return a valid
  // user.
  rpc GetCurrentUser (Nothing) returns (User);

  // Get a user by its id.
  rpc GetUserById (Id) returns (User);

  // Get the user with the specified email address. If none is found, a
  // `NOT_FOUND` error is returned.
  rpc GetUserByEmail (Id) returns (User);

  // Update all in the field-mask specified attributes of the user with the
  // provided id except for `status`. This especially includes `role` and
  // `email`. The updated user is returned and **guaranteed** to be specified.
  rpc UpdateUser (User.Update) returns (User);

  // Prevent the user with the provided id from logging in. It is not fully
  // deleted from the database though, but not considered as an **active user**
  // anymore. The calling user and other admin users cannot be deleted and will
  // result in a `FAILED_PRECONDITION` error. If no user with that `id` exists,
  // a `NOT_FOUND` error is returned.
  // The calling user is **required to be admin**.
  rpc SoftDeleteUser (Id) returns (Nothing);

  // Allow a previously soft-deleted user to login again.
  // The calling user is **required to be admin**.
  rpc SoftUndeleteUser (Id) returns (Nothing);

  // Get the user-specific settings for the calling user. It is **guaranteed**
  // that the result is **specified**.
  rpc GetUserSettings (Nothing) returns (UserSettings);

  // Update all in the field-mask specified attributes of the calling user's
  // user settings. The updated user settings are returned and **guaranteed** to
  // be **specified**.
  rpc UpdateUserSettings (UserSettings.Update) returns (UserSettings);

  
  // Get all project papers the requesting user is able to review. It is not
  // given that the returned papers belong to the same project.
  // The returned paper list **may be empty** if no papers can be reviewed.
  rpc GetAllPapersToReview (Nothing) returns (Project.Paper.List);

  // Get all project papers from a specific project identified by the id, the
  // requesting user is able to review.
  // The returned paper list **may be empty** if no papers can be reviewed.
  rpc GetPapersToReviewForProject (Id) returns (Project.Paper.List);

  // Get the project paper with the succeeding _local_ id of the project paper
  // identified by the provided _global_ id. It is **guaranteed** that the
  // returned paper is in the same project as the provided one. If the provided
  // paper is the last paper in the project, a `NOT_FOUND` error is returned.
  rpc GetNextPaper (Id) returns (Project.Paper);

  // Get the next project paper the calling user is able to review. Papers with
  // lower local ids are preferred. It is **guaranteed** that the returned paper
  // is in the same project as the one provided. If there is no reviewable paper
  // left in the project, a `NOT_FOUND` error is returned.
  rpc GetNextPaperToReview (Id) returns (Project.Paper);

  // Get the project paper with the preceeding _local_ id of the project paper
  // identified by the provided _global_ id. It is **guaranteed** that the
  // returned paper is in the same project as the provided one. If the provided
  // paper is the first paper in the project, a `NOT_FOUND` error is returned.
  rpc GetPreviousPaper (Id) returns (Project.Paper);


  // Get the list of papers on the reading list of the calling user.
  rpc GetReadingList (Nothing) returns (Paper.List);
  
  // Return whether or not the paper with the provided id is on the calling
  // user's reading list. If the provided id does not belong to a paper, `false`
  // will be returned.
  rpc IsPaperOnReadingList (Id) returns (BoolValue);
  
  // Add the paper with the provided id to the calling user's reading list. If
  // the paper is already on the user's reading list, nothing will be changed
  // and **no error** will be returned. If no paper with the provided id exists,
  // a `NOT_FOUND` error is returned.
  rpc AddPaperToReadingList (Id) returns (Nothing);
  
  // Remove the paper with the provided id from the calling user's reading
  // list. If no paper with the provided id exists, nothing will be changed and
  // **no error** will be returned.
  rpc RemovePaperFromReadingList (Id) returns (Nothing);

  
  // Get a list of all projects to which the user with the provided id is
  // invited to.
  rpc GetPendingInvitationsForUser (Id) returns (Project.List);

  // Invite a user to a project. If the project does not exist, a `NOT_FOUND`
  // error is returned. The provided project has to be active, meaning
  // it is neither deleted nor archived. If this condition is not met, a
  // `FAILED_PRECONDITION` error is returned. If a user with the provided email
  // already exists, an invitation is sent. The user is **not** instantly added
  // to the project. The user may then join the project using the invitation
  // displayed in the frontend. If, however, no user with the provided email
  // exists, an invitation email is sent out. The recipient may register on
  // the SnowballR instance and then accept the invitation. The calling user is
  // **required to be a project admin**.
  rpc InviteUserToProject (Project.Member.Invite) returns (Nothing);
  
  // Get a list of all users with a pending invitation to the provided project.
  // If the `id` field is specified, it is **guaranteed** that the user exists.
  // If, however, the `id` is empty, the user was invited by email and has not
  // yet registered on the instance.
  rpc GetPendingInvitationsForProject (Id) returns (User.List);

  // Get a list of all members of the specified project. The calling user is
  // included. Pending invitations are **not** included.
  rpc GetProjectMembers (Id) returns (Project.Member.List);

  // Remove the specified user from the given project. If the user is not part
  // of the project, nothing happens. The calling user is **required to be a
  // project admin**.
  rpc RemoveProjectMember (Project.Member.Remove) returns (Nothing);

  // Change the role of the user with the provided id within the given project.
  // The new role **must not** be **unspecified**.
  // The calling user is **required to be a project admin**.
  rpc UpdateProjectMemberRole (Project.Member.Update) returns (Nothing);


  // Get a list of all active projects in the SnowballR instance.
  rpc GetAllProjects (Nothing) returns (Project.List);

  // Get a list of all projects in the SnowballR instance that are marked as
  // deleted.
  rpc GetAllDeletedProjects (Nothing) returns (Project.List);

  // Get a list of all projects the provided user is a member of and which are
  // marked as deleted.
  rpc GetAllDeletedProjectsForUser (Id) returns (Project.List);

  // Get a list of all projects in the SnowballR instance that are marked as
  // archived.
  rpc GetAllArchivedProjects (Nothing) returns (Project.List);

  // Get a list of all active projects the provided user is a member of. Pending
  // invitations are **not** included.
  rpc GetAllProjectsForUser (Id) returns (Project.List);

  // Get a list of all projects the provided user is a member of and which are
  // marked as archived.
  rpc GetAllArchivedProjectsForUser (Id) returns (Project.List);

  // Create a new project. The provided name has to be unique, otherwise an
  // `ALREADY_EXISTS` error is returned. Every field must be **specified**
  // and **non-empty**, otherwise an `INVALID_ARGUMENT` error is returned. The
  // calling user is automatically a member of that project with "project admin"
  // role (`MEMBER_ROLE_ADMIN`). If the project was successfully created, it is
  // returned and **guaranteed** to be **specified**.
  rpc CreateProject (Project.Create) returns (Project);

  // Get a project by its id.
  rpc GetProjectById (Id) returns (Project);

  // Update the project with the given id using the provided data. Only
  // fields specified in the field-mask will be updated. The following fields
  // cannot be modified: `current_stage`, `max_stage`. The updated project
  // is returned and **guaranteed** to be **specified**. The calling user is
  // **required to be a project admin**.
  rpc UpdateProject (Project.Update) returns (Project);

  // Export the provided project in the given format. A binary blob is returned.
  // The export includes everything for it to be reimported and be
  // indistinguishable from the original project.
  rpc ExportProject (ExportRequest) returns (Blob);

  // Mark a project as deleted. It is not fully deleted from the database and
  // may later be restored. If no project exists with that `id`, a `NOT_FOUND`
  // error is returned.
  // The calling user is **required to be a project admin**.
  rpc SoftDeleteProject (Id) returns (Nothing);
  
  // Restore a previously deleted project to the **active** state. If no
  // project exists with that `id`, a `NOT_FOUND` error is returned.
  // The calling user is **required to be a project admin**.
  rpc SoftUndeleteProject (Id) returns (Nothing);

  // Retrieve information about the specified project. Only attributes
  // specified in the field-mask are included in the response.
  rpc GetProjectInformation (Project.Information.Get)
    returns (Project.Information);

  // Get the distribution of paper decisions within a project's stage, meaning
  // it returns the number of papers for each possible `PaperDecision` in the
  // specified stage.
  rpc GetDecisionStatisticsForStage (Project.Information.DecisionStatistics.Get)
    returns (Project.Information.DecisionStatistics);

  
  // Get a criterion by its id.
  rpc GetCriterionById (Id) returns (Criterion);

  // Get all criteria associated with a given project.
  rpc GetAllCriteriaForProject (Id) returns (Criterion.List);
  
  // Create a new criterion. Every field **must be specified** and
  // **non-empty**, otherwise an `INVALID_ARGUMENT` error is returned. If
  // successful, the newly created criterion is returned.
  // The calling user is **required to be a project admin**.
  rpc CreateCriterion (Criterion.Create) returns (Criterion);
  
  // Update the criterion with the given id using the provided data. Only
  // fields specified in the field-mask will be updated. The updated criterion
  // is returned and **guaranteed** to be **specified**.
  // The calling user is **required to be a project admin**.
  rpc UpdateCriterion (Criterion.Update) returns (Criterion);

  // Permanently delete the specified criterion. All references to it will also
  // be removed. **This cannot be reversed**. If no criterion with that `id`
  // exists, a `NOT_FOUND` error is returned.
  // The calling user is **required to be a project admin**.
  rpc DeleteCriterion (Id) returns (Nothing);


  // Get a project paper by its id.
  rpc GetProjectPaperById (Id) returns (Project.Paper);

  // Get a project paper using the project id and the local id within that
  // project. The local id is only **unique within its project**, **not**,
  // however, **globally**. Prefer `GetProjectPaperById` wherever possible.
  rpc GetProjectPaperByRelativeId (Project.Paper.Get) returns (Project.Paper);

  // Retrieve all project papers associated with the given project.
  rpc GetAllProjectPapersForProject (Id) returns (Project.Paper.List);

  // Add the provided paper to the given project within the specified stage.
  // If the paper is already in the project, a `FAILED_PRECONDITION` error is
  // returned. The stage must be lesser or equal to the projects `max_stage`,
  // otherwise an `INVALID_ARGUMENT` error is returned.
  // The calling user is **required to be a project admin**.
  rpc AddPaperToProject (Project.Paper.Add) returns (Project.Paper);

  // Update the project paper with the specified id using the
  // provided data. Only fields specified in the field-mask will be updated,
  // excluding `local_id`, `decision` and `reviews`. The updated project will
  // be returned and **guaranteed** to be **specified**.
  // The calling user is **required to be a project admin**.
  rpc UpdateProjectPaper (Project.Paper.Update) returns (Project.Paper);

  // Permanently remove the specified project paper from the project. All
  // references to this project paper will also be deleted. **This cannot be
  // undone**.
  // The calling user is **required to be a project admin**.
  rpc RemovePaperFromProject (Id) returns (Nothing);


  // Get a review by its id.
  rpc GetReviewById (Id) returns (Review);
  
  // Retrieve all reviews for a specific project paper.
  rpc GetAllReviewsForProjectPaper (Id) returns (Review.List);
  
  // Create a new review for a specific project paper. Every field must be
  // **specified** and **non-empty**, otherwise an `INVALID_ARGUMENT` error
  // is returned. `selected_criteria_ids` may be empty. The calling user must
  // not currently have another review for this project paper, otherwise a
  // `FAILED_PRECONDITION` error will be returned. The paper must also be
  // currently `UNREVIEWED` or `IN_REVIEW`, if it is not a `FAILED_PRECONDITION`
  // error is returned. The user also has to be a member of the same project
  // the project paper belongs to, if it is not a `FAILED_PRECONDITION` error is
  // returned. If successful, the created review is returned.
  rpc CreateReview (Review.Create) returns (Review);

  // Update the review with the given id using the provided data. Only
  // fields specified in the field-mask will be updated, excluding `user_id`.
  // The updated review is returned and **guaranteed** to be **specified**.
  // Only the owner of a review is allowed to update a review. The owner of the
  // review has to be member of the project the review is in, in order to update
  // it. A user is owner of a review, if the reviews `user_id` matches the
  // user's `id`.
  rpc UpdateReview (Review.Update) returns (Review);

  // Permanently remove the specified review from the project paper. **This
  // cannot be undone**. If no review with that `id` exists, a `NOT_FOUND` error
  // is returned. Only the owner of a review is allowed to delete a review. The
  // owner of the review has to be member of the project the review is in, in
  // order to remove it. A user is owner of a review, if the reviews `user_id`
  // matches the user's `id`.
  rpc DeleteReview (Id) returns (Nothing);
  
  
  // Get a paper by its id.
  rpc GetPaperById (Id) returns (Paper);

  // Create a paper using the given data. The `id` will be ignored and set by
  // the server. All fields may be empty. The created paper will be returned.
  rpc CreatePaper (Paper) returns (Paper);

  // Update the paper with the given id using the provided data. Only
  // fields specified in the field-mask will be updated, excluding `has_pdf`.
  // The updated paper is returned and **guaranteed** to be **specified**.
  rpc UpdatePaper (Paper.Update) returns (Paper);

  // Get a list of papers which are referring to the provided paper.
  rpc GetForwardReferencedPapers (Id) returns (Paper.List);

  // Get a list of papers which are referred to by the provided paper.
  rpc GetBackwardReferencedPapers (Id) returns (Paper.List);

  // Get a paper's pdf as a binary blob. If the specified paper has no
  // pdf attached to it (`has_pdf == false`), a `FAILED_PRECONDITION` error is
  // returned.
  rpc GetPaperPdf (Id) returns (Blob);

  // Set or overwrite the pdf of the specified paper. This call may also be
  // used to remove the pdf of a paper by not specifying the `pdf` field.
  // The paper's `has_pdf` field is automatically updated by the server.
  rpc SetPaperPdf (Paper.PdfUpdate) returns (Nothing);
}

message AvailableFetcherApis {
  repeated string fetcher_apis = 1;
}

